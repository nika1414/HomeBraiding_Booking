
function nope () {}

function isFunction (fn) { return typeof fn === 'function' }

function view (context, components, attr) {
    components = components || {}

    attr = attr || 'component'

    var selector = '[' + attr + ']'
    var elements = []

    function renderElement (node) {
        node.onupdate()
    }

    function render () {
        elements.forEach(renderElement)
    }

    function append (node) {
        var name = node.getAttribute(attr)
        if (!name) return

        var component = components[name]
        if (!isFunction(component)) return

        function onupdate () { component(node, context, render) }

        onupdate()

        node.onupdate = isFunction(node.onupdate) ? node.onupdate : onupdate
        node.onunload = isFunction(node.onunload) ? node.onunload : nope

        elements.push(node)
    }

    render.append = function (parentNode) {
        var nodes = parentNode.querySelectorAll(selector)

        for (var i = nodes.length - 1; i >= 0; i--) {
            append(nodes[i])
        }
    }

    function unload (node) {
        node.onunload()
        node.onupdate = null
        node.onunload = null
    }

    render.remove = function () {
        elements.forEach(unload)
        elements = []
    }

    return render
}

module.exports = view
